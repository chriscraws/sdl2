load("@rules_cc//cc:defs.bzl", "cc_library")

alias(
	name = "windows",
	actual  = "@bazel_tools//src/conditions:windows"
)

alias(
	name = "macos",
	actual  = "@bazel_tools//src/conditions:darwin_x86_64"
)

alias(
	name = "linux",
	actual  = "@bazel_tools//src/conditions:linux_x86_64"
)

SDL_LINKOPTS = select({
	"//:windows": [
		"-DEFAULTLIB:user32",
		"-DEFAULTLIB:gdi32",
		"-DEFAULTLIB:winmm",
		"-DEFAULTLIB:imm32",
		"-DEFAULTLIB:ole32",
		"-DEFAULTLIB:oleaut32",
		"-DEFAULTLIB:version",
		"-DEFAULTLIB:uuid",
		"-DEFAULTLIB:shell32",
		"-DEFAULTLIB:advapi32",
		"-DEFAULTLIB:hid",
		"-DEFAULTLIB:setupapi",
		"-DEFAULTLIB:opengl32",
		"-DEFAULTLIB:kernel32",
	],
	"//:linux": [
			"-lm",
			"-ldl",
			"-lasound",
			"-lm",
			"-ldl",
			"-lpthread",
			"-lpulse-simple",
			"-lpulse",
			"-lX11",
			"-lXext",
			"-lXcursor",
			"-lXinerama",
			"-lXi",
			"-lXrandr",
			"-lXss",
			"-lXxf86vm",
			"-lwayland-egl",
			"-lwayland-client",
			"-lwayland-cursor",
			"-lxkbcommon",
			"-lpthread",
			"-lrt",
	],
	"//conditions:default": [],
})

SDL_DEFINES = select({
	"//conditions:default": [],
	"//:linux": [
		"HAVE_LIBUDEV_H",
		"SDL_LOADSO_DLOPEN",
		"SDL_TIMER_UNIX",
		"SDL_VIDEO_DRIVER_X11",
  	"SDL_VIDEO_DRIVER_X11_XCURSOR",
  	"SDL_VIDEO_DRIVER_X11_XDBE",
  	"SDL_VIDEO_DRIVER_X11_XINERAMA",
  	"SDL_VIDEO_DRIVER_X11_XINPUT2",
  	"SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH",
  	"SDL_VIDEO_DRIVER_X11_XRANDR",
  	"SDL_VIDEO_DRIVER_X11_XSCRNSAVER",
  	"SDL_VIDEO_DRIVER_X11_XSHAPE",
  	"SDL_VIDEO_DRIVER_X11_XVIDMODE",
  	"SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS",
  	"SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY",
  	"SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM",
		"SDL_VIDEO_RENDER_OGL",
		"SDL_VIDEO_OPENGL",
		"SDL_VIDEO_OPENGL_GLX",
	],
})

cc_library(
	name = "SDL2_hdrs",
	hdrs = glob(["include/**/*.h"]),
	strip_include_prefix = "include",
	visibility = ["//visibility:public"],
)

cc_library(
	name = "SDL2base",
	srcs = [
		"src/SDL_assert.c",
		"src/SDL_dataqueue.c",
		"src/SDL_error.c",
		"src/SDL_hints.c",
		"src/SDL_log.c",
	],
	deps = [
		"//src/thread:thread",
		"//src/video:headers",
	],
	hdrs = glob(["include/**/*.h", "src/*.h"]),
	includes = ["include", "src"],
	visibility = ["//:__subpackages__"],
)

cc_library(
	name = "SDL2internal",
	hdrs = glob(["include/**/*.h", "src/*.h"]),
	includes = ["include", "src"],
	visibility = ["//:__subpackages__"],
	defines = SDL_DEFINES,
)

apple_binary(
	name = "SDL2_mac",
	binary_type = "dylib",
	deps = [
		":SDL2_lib",
	],
	platform_type = "macos",
	visibility = ["//:__subpackages__"],
)

genrule(
	name = "SDL2_dylib",
	srcs = ["SDL2_mac"],
	outs = ["SDL2.dylib"],
	cmd = "cp $(location SDL2_mac) $(location SDL2.dylib)",
)

cc_binary(
	name = "libSDL2.so",
	linkshared = True,
	deps = [
		":SDL2_lib",
	],
	visibility = ["//visibility:public"],
)

cc_binary(
	name = "SDL2.dll",
	linkshared = True,
	deps = [
		":SDL2_lib",
	],
	linkopts = SDL_LINKOPTS,
	visibility = ["//visibility:public"],
)

cc_library(
	name = "SDL2_lib",
	hdrs = glob(["include/*.h"]),
	includes = ["include", "src"],
	srcs = glob(["include/*.h", "src/*.c", "src/*.h"]),
	#alwayslink = True,
	linkstatic = True,
	linkopts = SDL_LINKOPTS,
	deps = [
		":SDL2internal",
		"//src/atomic:atomic",
		"//src/audio:audio",
		"//src/core:core",
		"//src/cpuinfo:cpuinfo",
		"//src/dynapi:dynapi",
		"//src/events:events",
		"//src/file:file",
		"//src/filesystem:filesystem",
		"//src/haptic:haptic",
		"//src/hidapi:hidapi",
		"//src/joystick:joystick",
		"//src/libm:libm",
		"//src/loadso:loadso",
		"//src/locale:locale",
		"//src/main:main",
		"//src/power:power",
		"//src/render:render",
		"//src/sensor:sensor",
		"//src/stdlib:stdlib",
		"//src/thread:thread",
		"//src/timer:timer",
		"//src/video:video",
	],
	visibility = ["//visibility:public"],
)

cc_library(
	name = "SDL2test",
	hdrs = glob(["include/SDL_test*.h"]),
	srcs = glob(["src/test/**/*.c"]),
	deps = ["//:SDL2_lib"],
	visibility = ["//test:__subpackages__"],
)
